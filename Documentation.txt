Data Structure:
==== Map (The Graph) ==== 
* Cities (vertices) stored in vector inside Map
	Where each City is a node(vertex) and the Flights in the City are the edges
* Time class will handle all time arithmetic
	time stored in military time
==== City (Vertex) ====
* Flights (Edges) stored in vector inside City 
* Flight is a struct with the following:
	City *destCity
	Time depart
	Time duration
	Time arrival
	float price
* Name of city as string

Algorithms:
==== Itinerary ====
* (J)ust get me there: 
use DFS, once we find the destination city, we have a path
* (F)ewest hops: 
	use BFS, once we find the destination city, we have the path with fewest hops
* (S)hortest trip:
	use shortest path algorithm (Dijkstra?) with duration as weight
* (C)heapest:
	use shortest path algorithm (Dijkstra?) with price as weight
* (P)rint:
	use DFS to traverse graph and print cities and their flights

Interface:
==== Time ====
class Time{
  private:
	int time;
			
  public:
	Time();
	  // default time: 0000
	Time(int t);
	  // takes int format HHMM (military), convert to HH:MM 
	  // for use with Flight struct, converts duration (int) to perform time arithmetic
	
	int asInt();
	  // getter, returns time (int)
	Time& operator=(const Time &t);
	  // assignment operator
	Time operator+(const Time &t);
	  // adds two Times
	Time operator-(const Time &t);
	  // subtracts two Times
	bool operator<(const Time &t);
	  // compares military time, returns true if this.time < t.time
	bool operator>(const Time &t);
	  // compares military time, returns true if this.time > t.time
	bool operator<=(const Time &t);
	  // compares military time, returns true if this.time <= t.time
	bool operator>=(const Time &t);
	  // compares military time, returns true if this.time >= t.time
	bool operator==(const Time &t);
	  // compares military time, returns true if this.time == t.time
	bool operator!=(const Time &t);
	  // compares military time, returns true if this.time != t.time
	friend istream& operator>>(istream *in, Time &t);
	  // reads in time with format HH:MMam or HH:MMpm
	  // converts to military time and stores in int time
	friend ostream& operator<<(ostream &out, const Time &t);
	  // converts military time to HH:MMam or HH:MMpm
	  // prints formatted time to out
	~Time();
}; //end of class Time
==== City ====
	City();
	  // Defaults are empty
	City(string name);
	  // Creates a City with setting the name of the city to the given name and creates empty flight vector
	~City();
	  // Adds the flight F to the City's flights vector
	void addFlight(Flight F);
	  //Returns the City's name
	string getName();
	  // Overloads the << operator
	friend ostream & operator<<(ostream &out, const City &C);
==== Map ==== 

	Map();
	~Map();
	  // Adds a City to the cities vector
	void addCity(string cName);
	  // Determines the departure city and then adds the flight to the Departure City's flights vector
	void addFlight(string dept, string dest, Time deptTime, Time dur, Time arrTime, float cost);
	//====	Menu Options ====
	  // Takes any path from Departure City to the Destination City with arrival on same day as departure 
	void justGetMeThere(City depart, City dest, Time departTime);//J
	  // Path from Departure City to the Destination City that takes the fewest number of flights 
	void fewestHops(City depart, City dest, Time departTime);    //F
	  // Path from Departure City to the Destination City that takes the shortest amount of time from 
	  // Departure city departure to Destination City arrival
	void shortestTrip(City depart, City dest, Time departTime);  //C
	  // Path from Departure City to the Destination City that costs the least 
	void cheapestTrip(City depart, City dest, Time departTime);  //S
	  // Prints the Citys and their respective flights
	void displayAll();  					     //P
	  // Overloads the ostream << operator
	friend ostream &operator<<(ostream &out, const Map &m);
	

==== Flight ====
typedef struct {
	City *destCity;
	Time depart;
	Time duration;
	float price;
} Flight;
